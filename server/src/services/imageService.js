require("dotenv").config();
const express = require("express");
const multer = require("multer");
const axios = require("axios");
const FormData = require("form-data");

const router = express.Router();

// Configure multer to store uploaded file in memory
const storage = multer.memoryStorage();
const upload = multer({ storage });

// also check file size and type again
router.post("/uploadImage", upload.single("image"), async (req, res) => {
  try {
    // Ensure a file was provided
    if (!req.file) {
      return res.status(400).json({ error: "No file provided" });
    }

    // Extract the file buffer and MIME type
    const { buffer, mimetype } = req.file;

    // Create a FormData instance to send to Imgur
    const formData = new FormData();
    // Upload the image as a base64 encoded string
    formData.append("image", buffer.toString("base64"));
    formData.append("type", "base64");

    const clientId = process.env.IMGUR_CLIENT_ID;
    if (!clientId) {
      throw new Error("IMGUR_CLIENT_ID not set in environment variables");
    }

    // POST to Imgur
    const response = await axios.post(
      "https://api.imgur.com/3/image",
      formData,
      {
        headers: {
          // Spread the headers generated by formData, including the correct multipart boundary
          ...formData.getHeaders(),
          Authorization: `Client-ID ${clientId}`,
        },
      },
    );

    // Check if the upload was successful
    const { data } = response;
    if (!data.success) {
      return res.status(500).json({ error: "Imgur upload failed" });
    }

    const { link, deletehash } = data.data;

    // Return the markdown image link and delete hash to the client
    res.status(200).json({
      directLink: link,
      imgDeleteHash: deletehash,
    });
  } catch (error) {
    // Log and return error information
    console.error(
      "Error uploading image:",
      error.response?.data || error.message,
    );
    res.status(500).json({
      error:
        error.response?.data?.error || error.message || "An error occurred",
    });
  }
});

module.exports = { router };
